type User {
    id: Number,
    email: String,
    name: String,
    role: UserRole
}

type Employee {
    num: Number,
    name: String,
    role: EmpRole,
}

type Movement {
    id: ID,
    empId: Number,
    month: Number,
    deliveries: Number,
    totBonus: Number,
    totDeliveries: Number,
    isr: Number,
    isrAdd: Number,
    cupons: Number,
    gross: Number,
    net: Number,
}

type Query {
    users: [User]!,
    user(id: ID!): User!,
    employees: [Employee]!,
    employee(num: ID!): Employee!,
    movements: [Movement]!,
    movement(id: ID!): Movement!
}

type Mutation {
    createEmployee(num: Number!, name: String!, role: EmpRole!): Employee!
    createMovement(empId: Number!, month: Number!, deliveries: Number!, totBonus: Number!, totDeliveries: Number!, isr: Number!, isrAdd: Number!, cupons: Number!, gross: Number!, net: Number!)
}

enum EmpRole {
    CHOFER
    CARGADOR
    AUXILIARES
}

enum UserRole {
  ADMIN
}